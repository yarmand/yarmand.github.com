<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[\_@yarmand coding tales_/]]></title>
  <link href="http://yarmand.github.com/atom.xml" rel="self"/>
  <link href="http://yarmand.github.com/"/>
  <updated>2013-02-10T00:46:12+01:00</updated>
  <id>http://yarmand.github.com/</id>
  <author>
    <name><![CDATA[yann Armand]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Embed markdown into your HTML]]></title>
    <link href="http://yarmand.github.com/blog/2012/02/21/embed-markdown-into-your-html/"/>
    <updated>2012-02-21T01:23:00+01:00</updated>
    <id>http://yarmand.github.com/blog/2012/02/21/embed-markdown-into-your-html</id>
    <content type="html"><![CDATA[<p>Sometime when you write documentation or HTML5 presentation (using
slide.js for instance), you want to write a part of the document an
easier way.</p>

<p>What about embeding directly some markdown code into you HTML and
convert it on the flight on the browser when displaying ?</p>

<h2>What I&#8217;d like to write</h2>

<p><html></p>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #6ab825; font-weight: bold">&lt;html&gt;</span>
  <span style="color: #6ab825; font-weight: bold">&lt;body&gt;</span>
      <span style="color: #6ab825; font-weight: bold">&lt;article&gt;</span>
         <span style="color: #6ab825; font-weight: bold">&lt;script </span><span style="color: #bbbbbb">type=</span><span style="color: #ed9d13">&quot;text/markdown&quot;</span><span style="color: #6ab825; font-weight: bold">&gt;</span>
<span style="color: #d0d0d0">The</span> <span style="color: #d0d0d0">nice</span> <span style="color: #d0d0d0">title</span> <span style="color: #d0d0d0">here</span>
<span style="color: #d0d0d0">=</span>
<span style="color: #d0d0d0">Lorem</span> <span style="color: #d0d0d0">ipsum</span> <span style="color: #d0d0d0">dolor</span> <span style="color: #d0d0d0">sit</span> <span style="color: #d0d0d0">amet,</span> <span style="color: #d0d0d0">consectetur</span> <span style="color: #d0d0d0">adipiscing</span> <span style="color: #d0d0d0">elit.</span> <span style="color: #d0d0d0">Phasellus</span> <span style="color: #d0d0d0">diam</span> <span style="color: #d0d0d0">sem.</span>

<span style="color: #d0d0d0">then</span> <span style="color: #d0d0d0">a</span> <span style="color: #d0d0d0">little</span> <span style="color: #d0d0d0">list</span>
<span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">item</span> <span style="color: #3677a9">1</span>
<span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">item2</span>
        <span style="color: #6ab825; font-weight: bold">&lt;/script&gt;</span>
      <span style="color: #6ab825; font-weight: bold">&lt;/article&gt;</span>
  <span style="color: #6ab825; font-weight: bold">&lt;/body&gt;</span>
<span style="color: #6ab825; font-weight: bold">&lt;/html&gt;</span>
</pre></td></tr></table></div>


<p></html></p>

<h2>The on the flight conversion</h2>

<p><a href="http://www.showdown.im">showdown</a> is the javascript markdown converter I will use.</p>

<p>At the end of my HTML file and before presentation runtime do its
magick, I do the conversion on all markdown I can find in the file :</p>

<p><html></p>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td><pre style="margin: 0; line-height: 125%">  <span style="color: #6ab825; font-weight: bold">&lt;script </span><span style="color: #bbbbbb">src=</span><span style="color: #ed9d13">&quot;http://www.showdown.im/showdown/example/showdown.js&quot;</span><span style="color: #6ab825; font-weight: bold">&gt;</span> <span style="color: #6ab825; font-weight: bold">&lt;/script&gt;</span>
  <span style="color: #6ab825; font-weight: bold">&lt;script&gt;</span>
    <span style="color: #d0d0d0">$(</span><span style="color: #6ab825; font-weight: bold">function</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
      <span style="color: #999999; font-style: italic">// replace markdown text </span>
      <span style="color: #d0d0d0">$(</span><span style="color: #ed9d13">&#39;script[type=&quot;text/markdown&quot;]&#39;</span><span style="color: #d0d0d0">).after(</span><span style="color: #6ab825; font-weight: bold">function</span><span style="color: #d0d0d0">(index){</span>
        <span style="color: #d0d0d0">converter</span> <span style="color: #d0d0d0">=</span> <span style="color: #6ab825; font-weight: bold">new</span> <span style="color: #d0d0d0">Showdown.converter();</span>
        <span style="color: #6ab825; font-weight: bold">return</span> <span style="color: #d0d0d0">converter.makeHtml(</span><span style="color: #6ab825; font-weight: bold">this</span><span style="color: #d0d0d0">.textContent);</span>
      <span style="color: #d0d0d0">});</span>
    <span style="color: #d0d0d0">});</span>
 <span style="color: #6ab825; font-weight: bold">&lt;/script&gt;</span>
</pre></td></tr></table></div>


<p></html></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pour une vrai popularité représentée par l'indice TIOBE]]></title>
    <link href="http://yarmand.github.com/blog/2011/12/07/pour-une-vrai-popularite-representee-par-lindice-tiobe/"/>
    <updated>2011-12-07T15:17:00+01:00</updated>
    <id>http://yarmand.github.com/blog/2011/12/07/pour-une-vrai-popularite-representee-par-lindice-tiobe</id>
    <content type="html"><![CDATA[<p><img src="http://yarmand.github.com/images/post_icons/tiobe.png" class="post_icon float_left" alt="Tiobe icon"></p>

<p><a href="http://www.camilleroux.com/">Camile Roux</a> nous indique sur <a href="http://rubylive.fr/items/157-ruby-toujours-11eme-au-classement-tiobe">RubyLive</a> que Ruby conserve sa 11eme place, juste derrière Javascript au classement <a href="www.tiobe.com">TIOBE</a></p>

<p>Le classement TIOBE utilise le mot popularité mais je pense que celui-ci est dévoyé dans ce cas.
L&#8217;indice TIOBE mesure le nombre d&#8217;ingénieurs disponibles et ce nombre ne représente pas la joie que chacun éprouve dans tel ou tel langage.
Il reflète simplement la <em>demande du marché</em>.</p>

<p>Je pense que de nombreux programmeurs ont un langage de prédilection pour leur activité professionnel mais cela ne reflète pas forcément leur goût.</p>

<p>Dans mon cas, je suis un gars plutôt pointu en C que je pratique depuis 20 ans, ce langage me fait manger mais je deteste.
Le dimanche je fait du Ruby pour me reposer le cerveau et j&#8217;essaye de participer à la communauté pour rendre ce langage plus &#8220;business usable&#8221;.</p>

<p>Merci Camille de nous pointer vers cet indice qui nous montre que notre enthousiasme pour les langages moderne n&#8217;est pas refléter par le marché.</p>

<p>Aller les gars !!!
Il faut pousser encore plus fort et convaincre les donneurs d&#8217;ordre pour que le TIOBE représente enfin la popularité du coeur des programmeurs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subject Following to better filter social network posts]]></title>
    <link href="http://yarmand.github.com/blog/2011/09/26/subject-following-to-better-filter-social-network-posts/"/>
    <updated>2011-09-26T14:26:00+02:00</updated>
    <id>http://yarmand.github.com/blog/2011/09/26/subject-following-to-better-filter-social-network-posts</id>
    <content type="html"><![CDATA[<p><img src='http://yarmand.github.com/images/post_icons/who_follow.png' class='post_icon float_right' alt='who follow'/>
<a href="http://twitter.com/#!/yarmand">Twitter</a> introduced public posting and <strong>follow</strong> concept from the beginning
and have been copied by <a href="https://plus.google.com/104135330570501675673">Google+</a> and more recently by <a href="https://www.facebook.com/yann.armand">Facebook</a> with the <a href="https://www.facebook.com/about/subscribe">subscribe button</a>.</p>

<p><strong>But profile follow is a one way selectors. It partially cover the issue because it ignore that a single person produce infos on differentes domains.</strong></p>

<p>As a normal human, I am curious about several subjects and I produce infos about several subjects.</p>

<p>In my case, I produce informations as a software programer and as a dog trainer. These are completely unrelated subjects followed by completely different people I don&#8217;t want to bother with non accurate infos.
To prevent that, I have to use multiple profiles and split my identity across them. It can become a nightmare or drive me Schizophrenic.</p>

<p><strong>So following an identity is not enough. To be efficient we should follow somebody about subjects.</strong></p>

<blockquote><p>for example I can follow <a href="http://twitter.com/#!/dhh">@DHH</a>on <em>Ruby</em> or <em>programming</em> but not on <em>skate boarding</em>.</p></blockquote>

<p><strong>One social profile/identity</strong> should propose <strong>several subjects</strong> (including a <em>global</em> one).
I should post to a subject the same way today I post to a <a href="http://www.google.com/support/plus/bin/static.py?hl=en&amp;guide=1257347&amp;page=guide.cs&amp;rd=1">google circle</a>, but as the opposite of google circles, this is not me choosing people receiving infos, <strong>this is people choosing to follow my public subjects</strong>.</p>

<p><strong>This way we get the double filter of choosing the most interesting people only on subject we care about.</strong></p>

<p>The main drawback of this method is to reduce <a href="http://en.wikipedia.org/wiki/Serendipity">Serendipity</a> which is the life of the internet. As a first response, I should say that every infos producer will have the responsibility of posting unrelated infos on subjects at a frequency acceptable to his followers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript initializers to your views with Rails 3.1 and CoffeeScript]]></title>
    <link href="http://yarmand.github.com/blog/2011/09/05/javascript-initializers-to-your-views-with-rails-3-dot-1-and-coffeescript/"/>
    <updated>2011-09-05T08:56:00+02:00</updated>
    <id>http://yarmand.github.com/blog/2011/09/05/javascript-initializers-to-your-views-with-rails-3-dot-1-and-coffeescript</id>
    <content type="html"><![CDATA[<h1>The Problem</h1>

<p>With the asset pipeline included in Rails 3.1, we have a great big javascript file including all at once our code.</p>

<p>But what about code isolation through all our sources files ?</p>

<p><a href="http://jashkenas.github.com/coffee-script">CofeeScript</a> respond to that perfectly with creation of one function object per file compiled. To add a global variable, you simply define it for the window object :</p>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #24909d">window</span><span style="color: #d0d0d0">.foo=</span> <span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">-&gt;</span>
  <span style="color: #d0d0d0">console.log(</span><span style="color: #ed9d13">&#39;foo&#39;</span><span style="color: #d0d0d0">)</span>
</pre></td></tr></table></div>


<p>So all our javascript code is executed when it loads with good code isolation, but what if we want part of the code executed only for one view or all views of a controller ?</p>

<h1>call initializers in your layout</h1>

<p>I first wrote the gem <a href="https://github.com/yarmand/epyce">Epyce</a> to limit code loaded to only current controller and view, but this had 2 main issues :</p>

<ul>
<li>loose benefit of one big js file to be put on a CDN</li>
<li>shared code between views must go to controller .js file</li>
</ul>


<p>Then I rollback to the big application.js file and add initializers registration to my layout.</p>

<p>Like this for erb:</p>

<pre><code>application.html.erb
</code></pre>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2
3
4
5
6</pre></td><td><pre style="margin: 0; line-height: 125%">    <span style="color: #6ab825; font-weight: bold">&lt;script </span><span style="color: #bbbbbb">type=</span><span style="color: #ed9d13">&#39;text/javascript&#39;</span><span style="color: #6ab825; font-weight: bold">&gt;</span>
      <span style="color: #d0d0d0">$(</span><span style="color: #24909d">document</span><span style="color: #d0d0d0">).ready(</span> <span style="color: #6ab825; font-weight: bold">function</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0">Rails.init(</span><span style="color: #ed9d13">&#39;&lt;%=&quot;#{controller.controller_name}&quot;%&gt;&#39;</span><span style="color: #d0d0d0">);</span>
        <span style="color: #d0d0d0">Rails.init(</span><span style="color: #ed9d13">&#39;&lt;%=&quot;#{controller.controller_name}_#{controller.action_name}&quot;%&gt;&#39;</span><span style="color: #d0d0d0">);</span>
      <span style="color: #d0d0d0">});</span>
    <span style="color: #6ab825; font-weight: bold">&lt;/script&gt;</span>
</pre></td></tr></table></div>


<p>or if like me you are a haml:</p>

<pre><code>application.html.haml
</code></pre>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><pre style="margin: 0; line-height: 125%"><span style="color: #6ab825; font-weight: bold">%script</span><span style="color: #d0d0d0">{</span><span style="color: #24909d">type</span><span style="color: #d0d0d0">:</span> <span style="color: #ed9d13">&#39;text/javascript&#39;</span><span style="color: #d0d0d0">}</span>
  $(document).ready( function() { Rails.init(&quot;<span style="color: #ed9d13">#{</span><span style="color: #d0d0d0">controller.controller_name</span><span style="color: #ed9d13">}</span>&quot;); Rails.init(&quot;<span style="color: #ed9d13">#{</span><span style="color: #d0d0d0">controller.controller_name</span><span style="color: #ed9d13">}</span>_<span style="color: #ed9d13">#{</span><span style="color: #d0d0d0">controller.action_name</span><span style="color: #ed9d13">}</span>&quot;);});
</pre></div>


<hr />

<h2>Register initializers</h2>

<p>Each initializer function can be binded to severals names.</p>

<p>By convention views are named => controllerName_viewName</p>

<p>here is an example of binding a initializer to the Person controller</p>

<pre><code>persons.js.coffee
</code></pre>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #d0d0d0">Rails.register_init</span> <span style="color: #ed9d13">&#39;persons&#39;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">-&gt;</span> 
  <span style="color: #d0d0d0">console.log(</span><span style="color: #ed9d13">&#39;hello from Person controller&#39;</span><span style="color: #d0d0d0">)</span>
</pre></td></tr></table></div>


<p>Here is an example of binding several views to one initializer</p>

<pre><code>persons.js.coffee
</code></pre>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #d0d0d0">Rails.register_init</span> <span style="color: #d0d0d0">[</span><span style="color: #ed9d13">&#39;persons_new&#39;</span><span style="color: #d0d0d0">,</span><span style="color: #ed9d13">&#39;persons_edit&#39;</span><span style="color: #d0d0d0">],</span> <span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">-&gt;</span>
  <span style="color: #d0d0d0">console.log(</span><span style="color: #ed9d13">&#39;editing a Person&#39;</span><span style="color: #d0d0d0">)</span>
</pre></td></tr></table></div>


<hr />

<h2>initializers are cumulative</h2>

<p>Calling <code>register_init()</code> several times on the same name cumulate initializers</p>

<p>for example:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2
3
4
5</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #d0d0d0">Rails.register_init</span> <span style="color: #ed9d13">&#39;mytest&#39;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">-&gt;</span> <span style="color: #d0d0d0">console.log(</span><span style="color: #ed9d13">&#39;foo&#39;</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">Rails.register_init</span> <span style="color: #ed9d13">&#39;mytest&#39;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">-&gt;</span> <span style="color: #d0d0d0">console.log(</span><span style="color: #ed9d13">&#39;bar&#39;</span><span style="color: #d0d0d0">)</span>

<span style="color: #999999; font-style: italic"># ... later in code ...</span>
<span style="color: #d0d0d0">Rails.init(</span><span style="color: #ed9d13">&#39;mytest&#39;</span><span style="color: #d0d0d0">)</span>
</pre></td></tr></table></div>


<p>will produce in console:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><pre style="margin: 0; line-height: 125%"><span style="color: #d0d0d0">foo</span>
<span style="color: #d0d0d0">bar</span>
</pre></div>


<hr />

<h2>The registering code</h2>

<p>To make all the previous code work, we need to define the Rails object.</p>

<pre><code>application.js.coffee
</code></pre>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #999999; font-style: italic">#= require_self</span>
<span style="color: #999999; font-style: italic">#= require_tree ./application</span>

<span style="color: #999999; font-style: italic"># From http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/</span>
<span style="color: #d0d0d0">fromPrototype</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(prototype,</span> <span style="color: #d0d0d0">object)</span> <span style="color: #d0d0d0">-&gt;</span>
  <span style="color: #d0d0d0">newObject</span> <span style="color: #d0d0d0">=</span> <span style="color: #24909d">Object</span><span style="color: #d0d0d0">.create(prototype)</span>
  <span style="color: #d0d0d0">`</span><span style="color: #6ab825; font-weight: bold">for</span><span style="color: #d0d0d0">(prop</span> <span style="color: #6ab825; font-weight: bold">in</span> <span style="color: #d0d0d0">object)</span>
    <span style="color: #d0d0d0">{</span>
      <span style="color: #6ab825; font-weight: bold">if</span><span style="color: #d0d0d0">(object.hasOwnProperty(prop))</span>
        <span style="color: #d0d0d0">newObject[prop]</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">object[prop];</span>
    <span style="color: #d0d0d0">}`</span>
  <span style="color: #6ab825; font-weight: bold">return</span> <span style="color: #d0d0d0">newObject</span>


<span style="color: #24909d">window</span><span style="color: #d0d0d0">.Rails=fromPrototype</span> <span style="color: #24909d">Array</span><span style="color: #d0d0d0">,</span>
  <span style="color: #40ffff">register_init: </span><span style="color: #d0d0d0">(names,</span> <span style="color: #d0d0d0">fun)</span> <span style="color: #d0d0d0">-&gt;</span>
    <span style="color: #6ab825; font-weight: bold">if</span><span style="color: #d0d0d0">(</span><span style="color: #6ab825; font-weight: bold">typeof</span><span style="color: #d0d0d0">(names.forEach)</span> <span style="color: #d0d0d0">==</span> <span style="color: #ed9d13">&#39;undefined&#39;</span><span style="color: #d0d0d0">)</span>
      <span style="color: #d0d0d0">n=names</span>
      <span style="color: #d0d0d0">names=[n]</span>
    <span style="color: #6ab825; font-weight: bold">for</span> <span style="color: #d0d0d0">n</span> <span style="color: #6ab825; font-weight: bold">in</span> <span style="color: #d0d0d0">names</span>
      <span style="color: #d0d0d0">previously_registered=</span><span style="color: #6ab825; font-weight: bold">this</span><span style="color: #d0d0d0">[n]</span>
      <span style="color: #6ab825; font-weight: bold">this</span><span style="color: #d0d0d0">[n]=()</span> <span style="color: #d0d0d0">-&gt;</span>
        <span style="color: #6ab825; font-weight: bold">if</span><span style="color: #d0d0d0">(</span><span style="color: #6ab825; font-weight: bold">typeof</span><span style="color: #d0d0d0">(previously_registered)</span> <span style="color: #d0d0d0">!=</span> <span style="color: #ed9d13">&#39;undefined&#39;</span><span style="color: #d0d0d0">)</span>
          <span style="color: #d0d0d0">previously_registered.call()</span>
        <span style="color: #d0d0d0">fun.call()</span>
  <span style="color: #40ffff">init: </span><span style="color: #d0d0d0">(name)</span> <span style="color: #d0d0d0">-&gt;</span>
    <span style="color: #6ab825; font-weight: bold">if</span><span style="color: #d0d0d0">(</span><span style="color: #6ab825; font-weight: bold">typeof</span><span style="color: #d0d0d0">(</span><span style="color: #6ab825; font-weight: bold">this</span><span style="color: #d0d0d0">[name])</span> <span style="color: #d0d0d0">!=</span> <span style="color: #ed9d13">&#39;undefined&#39;</span><span style="color: #d0d0d0">)</span>
      <span style="color: #6ab825; font-weight: bold">this</span><span style="color: #d0d0d0">[name]()</span>
</pre></td></tr></table></div>


<p><strong>Note the usage of <code>#= require_self</code> to ensure your Rails object will be defined before including all our others files</strong></p>

<hr />

<h2>One more thing</h2>

<p>When registered, initializers can be called using init() and there name as string or directly on the Rails object.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #202020; overflow:auto;width:auto;color:white;background:black;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:130%;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2
3
4
5
6</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #d0d0d0">Rails.register_init</span> <span style="color: #ed9d13">&#39;mytest&#39;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">-&gt;</span> <span style="color: #d0d0d0">console.log(</span><span style="color: #ed9d13">&#39;foo&#39;</span><span style="color: #d0d0d0">)</span>

<span style="color: #999999; font-style: italic"># ... later in code ...</span>
<span style="color: #d0d0d0">Rails.init(</span><span style="color: #ed9d13">&#39;mytest&#39;</span><span style="color: #d0d0d0">)</span>
<span style="color: #999999; font-style: italic"># or directly</span>
<span style="color: #d0d0d0">Rails.mytest()</span>
</pre></td></tr></table></div>


<hr />

<h2>Biblio and links</h2>

<p>I will finish with a great thanks to <strong>Yehuda Katz</strong> for his 2 essential posts about Javascript :</p>

<ul>
<li><a href="http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/">Understanding “Prototypes” in JavaScript</a></li>
<li><a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">Understanding JavaScript Function Invocation and “this”</a></li>
</ul>


<p>links:</p>

<ul>
<li><a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a></li>
<li><a href="http://edgeguides.rubyonrails.org/asset_pipeline.html">Asset Pipeline guide</a></li>
<li><a href="https://github.com/sstephenson/sprockets">sprockets (the engine under asset pipeline)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rework: the book from 37 signals founders]]></title>
    <link href="http://yarmand.github.com/blog/2011/06/20/rework-the-book-from-37-signals-founders/"/>
    <updated>2011-06-20T09:23:00+02:00</updated>
    <id>http://yarmand.github.com/blog/2011/06/20/rework-the-book-from-37-signals-founders</id>
    <content type="html"><![CDATA[<p><img src='http://yarmand.github.com/images/post_icons/art-planningisguessing.png' class='post_icon float_left' alt='rework'></p>

<p><a href="http://37signals.com/rework/">a Great book</a></p>

<p>Youngest, forget what you have been teached.</p>

<p>Elders, you’ll found in it the words to put on the feelings you got.</p>
]]></content>
  </entry>
  
</feed>
